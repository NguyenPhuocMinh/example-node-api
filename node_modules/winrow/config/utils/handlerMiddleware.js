'use strict';

const lodash = require('lodash');
const loggingFactory = require('../logger');
const { isFunction, get, isEmpty } = lodash;

const handlerMiddleware = (req, res, serviceMethod, input, output) => {
  let args = {};
  let opts = {};
  let response = {};
  if (input) {
    if (isFunction(input.transform)) {
      args = input.transform(req);
      opts.loggingFactory = loggingFactory;
    }
  }
  return Promise.resolve(args)
    .then(args => {
      return serviceMethod(args, opts);
    })
    .then(result => {
      if (output) {
        if (isFunction(output.transform)) {
          response = output.transform = output.transform(result);
        }
      }
      return response;
    })
    .then(data => {
      const headers = get(data, 'headers');
      const body = get(data, 'body');
      if (!isEmpty(headers) && !isEmpty(body)) {
        return res
          .set(headers)
          .send(body)
      }
      if (isEmpty(headers) && !isEmpty(body)) {
        return res.send(body)
      }
    })
    .catch(err => {
      const { name, message, statusCode } = err;
      if (statusCode) {
        res.status(statusCode).send({ name: name, message: message })
      }
      loggingFactory.error('error', err);
      return Promise.reject(err);
    })
};

module.exports = handlerMiddleware;