'use strict';

const lodash = require('lodash');
const errorCodes = require('./errorCodes');
const returnCodes = require('./returnCodes');
const loggingFactory = require('./logger');
const getRequestId = require('./getRequestId');
const transformText = require('../options/transformText');
const { isFunction, get, isEmpty, isArray, toUpper } = lodash;

const handlerMiddleware = (
  req,
  res,
  serviceMethod,
  input,
  output,
) => {
  let args = {};
  let opts = {};
  let response = {};
  if (input) {
    if (isFunction(input.transform)) {
      args = input.transform(req);
    }
  }
  return Promise.resolve(args)
    .then(args => {
      opts.loggingFactory = loggingFactory;
      opts.requestId = getRequestId();
      return serviceMethod(args, opts);
    })
    .then(result => {
      if (output) {
        if (isFunction(output.transform)) {
          response = output.transform = output.transform(result);
        }
        response = output.transform;
      }
      return response;
    })
    .then(data => {
      const headers = get(data, 'headers');
      const body = get(data, 'body');
      if (!isEmpty(headers) && !isEmpty(body)) {
        return res
          .set(headers)
          .send(body)
      }
      if (isEmpty(headers) && !isEmpty(body)) {
        return res.send(body)
      }
    })
    .catch(error => {
      if (error instanceof Error) {
        const errorMessage = returnCodes(errorCodes, error.message);
        const statusCode = get(errorMessage, 'statusCode');
        return res.status(statusCode).send(errorMessage);
      }
      if (isArray(error)) {
        error = error.map(err => {
          const lastElement = err.split(' ').slice(-1).pop();
          const transferErr = transformText(lastElement);
          const messageError = `[${toUpper(err.split(' ')[0])}]-${transferErr}`;
          return messageError;
        })
        return res.status(500).send(error);
      }
      const { name, message, statusCode } = error;
      if (statusCode) {
        return res.status(statusCode).send({ name: name, message: message });
      }
    })
};

module.exports = handlerMiddleware;