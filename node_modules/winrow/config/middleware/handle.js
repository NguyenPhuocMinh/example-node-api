'use strict';

const Promise = require('bluebird');
const lodash = require('lodash');
const requestId = require('../supports/requestId');
const loggingFactory = require('winrow-logger');
const slugifyString = require('../supports/slugifyString');
const validator = require('../supports/validator');
const error = require('../middleware/error');
const { get, isEmpty, isFunction } = lodash;

function handle(params) {
  const { req, res, input, output, service_method } = params;

  let argsInput = {};
  let argsOutput = {};

  const opts = {
    requestId: requestId,
    validator: validator,
    loggingFactory: loggingFactory,
    slugifyString: slugifyString
  };

  if (input) {
    if (isFunction(input.transform)) {
      argsInput = input.transform(req, opts);
    }
  }

  return Promise.resolve(argsInput)
    .then(args => {
      return service_method(args, opts);
    })
    .then(result => {
      if (output) {
        if (isFunction(output.transform)) {
          argsOutput = output.transform(result);
        }
      }
      return Promise.resolve(argsOutput)
        .then(output => {
          return output
        });
    })
    .then(data => {
      const headers = get(data, 'headers');
      const body = get(data, 'body');
      if (!isEmpty(headers) && !isEmpty(body)) {
        return res
          .set(headers)
          .send(body)
      }
      if (isEmpty(headers) && !isEmpty(body)) {
        return res.send(body)
      }
    })
    .catch(err => {
      error(err, res);
    })
};

module.exports = handle;