'use strict';

const http = require('http');
const https = require('https');
const fs = require('fs');
const path = require('path');
const process = require('process');
const lodash = require('lodash');
const express = require('express');
const router = express.Router();
const logger = require('morgan');
const cors = require('cors');
const bodyParser = require('body-parser');
const startServer = require('../config/utils/start');
const stopServer = require('../config/utils/stop');
const connect = require('../config/utils/connect');
const disconnect = require('../config/utils/disconnect');
const mapping = require('../config/utils/mapping');
const lookup = require('../config/supports/lookup');
const { get } = lodash;

function Server(params = {}) {
  const app = express();
  // init server
  const { application } = params;
  const enable = get(application, 'enable');
  const data_ssl = get(application, 'data_ssl');
  const path_server = get(application, 'pathServer');
  const protocol = enable ? process.env.PROTOCOL || 'https' : 'http';
  const port_server = enable ? process.env.PORT || get(data_ssl, 'port') : 8080;
  const host_server = enable ? process.env.HOST || get(data_ssl, 'host') : '0.0.0.0';
  const database_server = get(application, 'bridge.connect.database_server');
  const database_local = get(application, 'bridge.connect.database_local');
  const host_mongoose = enable ? get(database_server, 'host') : get(database_local, 'host');
  const port_mongoose = enable ? get(database_server, 'port') : get(database_local, 'port');
  const name_mongoose = enable ? get(database_server, 'name') : get(database_local, 'name');
  const mappings = get(application, 'bridge.rest_api.mappings') || [];

  const options = {
    key: fs.readFileSync(path.resolve(__dirname, '../config/data', 'key.pem')),
    cert: fs.readFileSync(path.resolve(__dirname, '../config/data', 'cert.pem'))
  }

  const server = enable ? https.createServer(options, app) : http.createServer(app);

  app.use(cors());
  app.use(logger('dev'));
  app.use(bodyParser.json({ limit: '100mb' }));
  app.use(bodyParser.urlencoded({ limit: '100mb', extended: true }));
  app.use(express.static(path.join(__dirname, 'build')));
  app.use('/rest/api/images', express.static('images'));

  // start server
  this.start = function () {
    return startServer({ server, path_server, protocol, port_server, host_server });
  }
  // stop server
  this.stop = function () {
    return stopServer({ server });
  };
  // connect mongoose
  this.connect_mongoose = function () {
    return connect({ host_mongoose, port_mongoose, name_mongoose });
  };
  // disconnect mongoose
  this.disconnect_mongoose = function () {
    return disconnect({ host_mongoose, port_mongoose, name_mongoose });
  };
  // mapping api
  this.mapping = function () {
    return mapping({ app, router, path_server, mappings })
  };
};

/*
* Expose Winrow()
*/
exports = module.exports = new Server();

/*
* Expose prototypes
*/
exports.init = Server;
exports.require = lookup;

/*
* End Expose
*/